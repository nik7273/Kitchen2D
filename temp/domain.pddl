(define (domain stripstream)
	(:requirements :typing)
	(:types object)
	(:constants x0 x1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x2 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x3 x30 x31 x32 x33 x34 x35 x36 x37 x4 x5 x6 x7 x8 x9 - object)
	(:predicates (AtPose ?cup - object ?end_pose - object)
		(BelowFaucet ?gripper - object ?end_pose - object ?cup - object ?grasp - object)
		(BlockSupport ?cup - object ?end_pose - object ?block - object ?pose2 - object)
		(CanDump ?gripper - object ?end_pose - object ?pose3 - object ?cup - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		(CanGrasp ?gripper - object ?end_pose - object ?cup - object ?pose2 - object ?grasp - object ?control - object)
		(CanMove ?gripper - object)
		(CanPour ?gripper - object ?end_pose - object ?cup - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		(CanPush ?gripper - object ?end_pose - object ?pose2 - object ?cup - object ?pose3 - object ?pose4 - object ?control - object)
		(CanScoop ?gripper - object ?end_pose - object ?pose2 - object ?cup - object ?grasp - object ?kettle - object ?pose3 - object ?control - object)
		(CanStir ?gripper - object ?end_pose - object ?cup - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		(Clear ?block - object)
		(Collision ?control - object ?gripper - object ?end_pose - object)
		(Empty ?gripper - object)
		(Grasped ?cup - object ?grasp - object)
		(HasCoffee ?cup - object)
		(HasCream ?cup - object)
		(HasSugar ?cup - object)
		(Holding ?cup - object)
		(IsBlock ?cup - object)
		(IsControl ?control - object)
		(IsCup ?cup - object)
		(IsGrasp ?cup - object ?grasp - object)
		(IsGripper ?gripper - object)
		(IsPose ?cup - object ?end_pose - object)
		(IsPourable ?cup - object)
		(IsSpoon ?kettle - object)
		(IsStirrer ?kettle - object)
		(Mixed ?cup - object)
		(Motion ?gripper - object ?end_pose - object ?pose2 - object ?control - object)
		(MotionH ?gripper - object ?end_pose - object ?cup - object ?grasp - object ?pose2 - object ?control - object)
		(Object ?x - object)
		(On ?cup - object ?block - object)
		(Scooped ?cup - object)
		(Stackable ?cup - object ?block - object)
		(TableSupport ?end_pose - object)
		(Unsafe ?control - object))
	(:functions (total-cost))
	(:action dump
		:parameters (?gripper - object ?end_pose - object ?pose3 - object ?spoon - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		:precondition (and (CanDump ?gripper ?end_pose ?pose3 ?spoon ?grasp ?kettle ?pose2 ?control) (AtPose ?gripper ?end_pose) (Grasped ?spoon ?grasp) (AtPose ?kettle ?pose2) (HasSugar ?spoon))
		:effect (and (HasSugar ?kettle) (CanMove ?gripper) (not (HasSugar ?spoon)) (not (Scooped ?spoon)) (not (AtPose ?gripper ?end_pose)) (AtPose ?gripper ?pose3) (increase (total-cost) 100)))
	(:action move
		:parameters (?gripper - object ?end_pose - object ?pose2 - object ?control - object)
		:precondition (and (Motion ?gripper ?end_pose ?pose2 ?control) (Empty ?gripper) (CanMove ?gripper) (AtPose ?gripper ?end_pose) (not (Unsafe ?control)))
		:effect (and (AtPose ?gripper ?pose2) (not (AtPose ?gripper ?end_pose)) (not (CanMove ?gripper)) (increase (total-cost) 100)))
	(:action pour-gp
		:parameters (?gripper - object ?end_pose - object ?cup - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		:precondition (and (CanPour ?gripper ?end_pose ?cup ?grasp ?kettle ?pose2 ?control) (AtPose ?gripper ?end_pose) (Grasped ?cup ?grasp) (AtPose ?kettle ?pose2) (HasCream ?cup))
		:effect (and (HasCream ?kettle) (CanMove ?gripper) (not (HasCream ?cup)) (increase (total-cost) 100)))
	(:action stack
		:parameters (?gripper - object ?end_pose - object ?cup - object ?pose2 - object ?grasp - object ?block - object ?pose3 - object ?control - object)
		:precondition (and (CanGrasp ?gripper ?end_pose ?cup ?pose2 ?grasp ?control) (BlockSupport ?cup ?pose2 ?block ?pose3) (AtPose ?gripper ?end_pose) (Grasped ?cup ?grasp) (AtPose ?block ?pose3) (Clear ?block))
		:effect (and (AtPose ?cup ?pose2) (Empty ?gripper) (CanMove ?gripper) (not (Grasped ?cup ?grasp)) (not (Clear ?block)) (increase (total-cost) 100)))
	(:action scoop
		:parameters (?gripper - object ?end_pose - object ?pose2 - object ?spoon - object ?grasp - object ?kettle - object ?pose3 - object ?control - object)
		:precondition (and (CanScoop ?gripper ?end_pose ?pose2 ?spoon ?grasp ?kettle ?pose3 ?control) (AtPose ?gripper ?end_pose) (Grasped ?spoon ?grasp) (AtPose ?kettle ?pose3) (HasSugar ?kettle))
		:effect (and (AtPose ?gripper ?pose2) (HasSugar ?spoon) (CanMove ?gripper) (Scooped ?spoon) (not (AtPose ?gripper ?end_pose)) (increase (total-cost) 100)))
	(:action place
		:parameters (?gripper - object ?end_pose - object ?cup - object ?pose2 - object ?grasp - object ?control - object)
		:precondition (and (CanGrasp ?gripper ?end_pose ?cup ?pose2 ?grasp ?control) (TableSupport ?pose2) (AtPose ?gripper ?end_pose) (Grasped ?cup ?grasp) (not (Scooped ?cup)))
		:effect (and (AtPose ?cup ?pose2) (Empty ?gripper) (CanMove ?gripper) (not (Grasped ?cup ?grasp)) (increase (total-cost) 100)))
	(:action pick
		:parameters (?gripper - object ?end_pose - object ?cup - object ?pose2 - object ?grasp - object ?control - object)
		:precondition (and (CanGrasp ?gripper ?end_pose ?cup ?pose2 ?grasp ?control) (TableSupport ?pose2) (AtPose ?gripper ?end_pose) (AtPose ?cup ?pose2) (Empty ?gripper))
		:effect (and (Grasped ?cup ?grasp) (CanMove ?gripper) (not (AtPose ?cup ?pose2)) (not (Empty ?gripper)) (increase (total-cost) 100)))
	(:action push
		:parameters (?gripper - object ?end_pose - object ?pose2 - object ?block - object ?pose3 - object ?pose4 - object ?control - object)
		:precondition (and (CanPush ?gripper ?end_pose ?pose2 ?block ?pose3 ?pose4 ?control) (AtPose ?gripper ?end_pose) (AtPose ?block ?pose3) (Empty ?gripper) (Clear ?block))
		:effect (and (AtPose ?gripper ?pose2) (AtPose ?block ?pose4) (CanMove ?gripper) (not (AtPose ?gripper ?end_pose)) (not (AtPose ?block ?pose3)) (increase (total-cost) 100)))
	(:action stir
		:parameters (?gripper - object ?end_pose - object ?spoon - object ?grasp - object ?kettle - object ?pose2 - object ?control - object)
		:precondition (and (CanStir ?gripper ?end_pose ?spoon ?grasp ?kettle ?pose2 ?control) (AtPose ?gripper ?end_pose) (Grasped ?spoon ?grasp) (AtPose ?kettle ?pose2) (HasCoffee ?kettle) (HasCream ?kettle) (HasSugar ?kettle))
		:effect (and (Mixed ?kettle) (CanMove ?gripper) (increase (total-cost) 100)))
	(:action move-holding
		:parameters (?gripper - object ?end_pose - object ?cup - object ?grasp - object ?pose2 - object ?control - object)
		:precondition (and (MotionH ?gripper ?end_pose ?cup ?grasp ?pose2 ?control) (not (Empty ?gripper)) (AtPose ?gripper ?end_pose) (Grasped ?cup ?grasp) (CanMove ?gripper) (not (Unsafe ?control)))
		:effect (and (AtPose ?gripper ?pose2) (not (AtPose ?gripper ?end_pose)) (not (CanMove ?gripper)) (increase (total-cost) 100)))
	(:action fill
		:parameters (?gripper - object ?end_pose - object ?cup - object ?grasp - object)
		:precondition (and (BelowFaucet ?gripper ?end_pose ?cup ?grasp) (AtPose ?gripper ?end_pose) (Grasped ?cup ?grasp))
		:effect (and (HasCoffee ?cup) (CanMove ?gripper) (increase (total-cost) 100)))
	(:derived (Holding ?cup - object)
		(or (exists (?grasp - object) (and (IsGrasp ?cup ?grasp) (Grasped ?cup ?grasp)))))
	(:derived (Unsafe ?control - object)
		(or (exists (?cup - object ?end_pose - object) (and (Collision ?control ?cup ?end_pose) (AtPose ?cup ?end_pose)))))
	(:derived (On ?cup - object ?block - object)
		(or (exists (?pose2 - object ?end_pose - object) (and (BlockSupport ?cup ?end_pose ?block ?pose2) (AtPose ?cup ?end_pose) (AtPose ?block ?pose2))))))
